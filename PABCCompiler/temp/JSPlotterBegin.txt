<script>
var cx = null;
var cv = null;
function writePosition(ax, x, y){
	cx.fillStyle = "rgb("+ax.R+","+ax.G+","+ax.B+")";
	cx.fillRect(ax.x,ax.y,ax.position_width,ax.position_height);
	
	cx.font = ax.position_font_size+'pt '+ax.position_font_name;
	cx.fillStyle = "black";
	cx.textAlign = "left";
	cx.textBaseline = "top";
	
	var x1 = ax.field_origin_x + (x-ax.origin_x)/ax.step_x;
	var y1 = ax.field_origin_y + (ax.origin_y-y)/ax.step_y;
	cx.fillText("X: "+x1.toFixed(3)+" Y: "+y1.toFixed(3),ax.x,ax.y+ax.position_height*0.1);
}
var axes = [];

 
 function getCursorPosition(canvas, event) {
	if (canvas !== cv)
		return;
    const rect = cv.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
	
	axes.forEach(elem =>{
		if (x > elem.x && x < elem.x+elem.width && y > elem.y && y < elem.y+elem.height && elem.need_position == true)
		{
			writePosition(elem,x,y);
		}
	});
}

function GetTextSize(text){
	let metrics = cx.measureText(text);
	let h = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
	return {width:metrics.width,height:h};
}

function SetPositionFontSize(){
	axes.forEach(elem =>{
		elem.position_font_size = GetSizeByWH("X: 99999.999 Y: 99999.999",elem.position_font_name,
												elem.width/3,elem.position_height*0.5);
	});
}

function GetSizeByWH(text,fnt_name,w,h){
	let size = h;
	cx.font = size.toString()+'pt '+fnt_name;
	let cur_height = GetTextSize(text).height;
	while (cur_height > h)
	{
		size -= 0.1; cx.font = size+'pt '+fnt_name;
		cur_height = GetTextSize(text).height;
	}
	while (cur_height < 0.9*h)
	{
		size += 0.1; cx.font = size+'pt '+fnt_name;
		cur_height = GetTextSize(text).height;
	}
	
	let cur_width = GetTextSize(text).width;
	while (cur_width > w)
	{
		size -= 0.1; cx.font = size+'pt '+fnt_name;
		cur_width = GetTextSize(text).width;
	}
	while (cur_width < 0.9*w)
	{
		size += 0.1; cx.font = size+'pt '+fnt_name;
		cur_width = GetTextSize(text).width;
	}
	return size;
} 

function SetAxesNumsSize(x,y,fxnums,fynums, x_border, y_border, fnt_name) {
	let size1 = y_border;
	
	cx.font = size1.toString()+'pt '+fnt_name;

	let cur_height = GetTextSize(fxnums[0].toString()).height;
	while (cur_height > y_border * 0.7) 
	{
		size1 -= 0.1; cx.font = size1+'pt '+fnt_name;
		cur_height = GetTextSize(fxnums[0].toString()).height;
	}
	while (cur_height < y_border * 0.6) 
	{
		size1 += 0.1; cx.font = size1+'pt '+fnt_name;
		cur_height = GetTextSize(fxnums[0].toString()).height;
	}

	let longest_num = fynums[fynums.length - 1];
	if (GetTextSize(longest_num.toString()).width < GetTextSize(fynums[0].toString()).width) 
		longest_num = fynums[0];

	let cur_width = GetTextSize(longest_num.toString()).width;

	while (cur_width > x_border * 0.7) 
	{
		size1 -= 0.1; cx.font = size1+'pt '+fnt_name;
		cur_width = GetTextSize(longest_num.toString()).width;
	}
	
	axes.forEach(elem =>{
		if (x == elem.x && y == elem.y)
			elem.position_font_size = size1;
	});
}

function Txt(x,y,text,align_x,align_y,fnt = null,R = null, G = null, B = null){
	cx.fillStyle = "black";
	if (fnt != null)
	{
		cx.font = fnt;
		cx.fillStyle = "rgb("+R+","+G+","+B+")";
	}
	if (align_y == "center")
		y -= GetTextSize(text).height*0.7;
	cx.textAlign = align_x;
	cx.textBaseline = "top";
	y = y+GetTextSize(text).height*0.15;
	cx.fillText(text,x,y);
}

function Rct(x,y,w,h,fR,fG,fB,width = 0,sR = null,sG = null,sB = null) {
	cx.fillStyle = "rgb("+fR+","+fG+","+fB+")";
	cx.fillRect(x,y,w,h);
	if (sR != null && sG != null && sB != null && width != 0){
		cx.strokeStyle = "rgb("+sR+","+sG+","+sB+")";
		cx.lineWidth = width;
		cx.strokeRect(x,y,w,h);
	}
}
function Lns(arr_x,arr_y,w,R,G,B) {
	cx.strokeStyle = "rgb("+R+","+G+","+B+")";
	cx.lineWidth = w;
	cx.beginPath();
    for (let i = 1; i < arr_x.length; i++){
		cx.moveTo(arr_x[i-1],arr_y[i-1]);
		cx.lineTo(arr_x[i],arr_y[i]);
	}
	cx.stroke();
}
function Sct(arr_x,arr_y,r,R,G,B) {
	cx.fillStyle = "rgb("+R+","+G+","+B+")";
	cx.beginPath();
    for (let i = 0; i < arr_x.length-1; i++){
		cx.arc(arr_x[i],arr_y[i],r,0,Math.PI*2);
		cx.moveTo(arr_x[i+1],arr_y[i+1]);
	}
	cx.arc(arr_x[arr_x.length-1],arr_y[arr_x.length-1],r,0,Math.PI*2);
	cx.fill();
}

function downloadCnv(){
	let downloadLink = document.createElement('a');
	downloadLink.setAttribute('download', 'PlotterJupyterImage.png');
	let dataURL = cv.toDataURL('image/png');
	let url = dataURL.replace(/^data:image\/png/,'data:application/octet-stream');
	downloadLink.setAttribute('href',url);
	downloadLink.click();
}
function copyCnv(){
	cv.toBlob(function(blob) { 
		const item = new ClipboardItem({ "image/png": blob });
		navigator.clipboard.write([item]); 
	});
}

